var search_data = {"index":{"searchIndex":["clangc","codecompleteresults","completionresult","completionstring","cursor","cursorset","diagnostic","file","index","module","overriddencursor","sourcelocation","sourcerange","translationunit","type","align_of()","annotation()","annotations()","arg_type()","arg_types()","argument()","arguments()","array_element_type()","array_size()","ast_file()","availability()","availability()","brief_comment()","brief_comment_text()","calling_conv()","canonical_cursor()","canonical_type()","category()","category_name()","category_text()","chunk_completion_string()","chunk_completion_strings()","chunk_kind()","chunk_kinds()","chunk_text()","chunk_texts()","class_type()","code_complete_at()","comment_range()","completion_string()","completion_string()","container_usr()","contains()","contexts()","create_translation_unit()","create_translation_unit2()","create_translation_unit_from_source_file()","create_translation_unit_raw()","cursor()","cursor_kind()","cxx_access_specifier()","cxx_method_is_const()","cxx_method_is_pure_virtual()","cxx_method_is_static()","cxx_method_is_virtual()","cxx_ref_qualifier()","decl_obj_c_type_encoding()","default_code_complete_options()","default_diagnostic_display_options()","default_editing_translation_unit_options()","default_reparse_options()","default_save_options()","definition()","diagnostic()","diagnostic()","diagnostics()","diagnostics()","diagnostics_num()","display_name()","element_type()","end()","enum_const_decl_unsigned_value()","enum_const_decl_value()","enum_decl_integer_type()","extent()","field_decl_bit_width()","file()","file_location()","fixit()","format()","full_name()","global_options()","global_options=()","hash()","ib_outlet_collection_type()","included_file()","insert()","is_anonymous()","is_attribute()","is_bit_field()","is_const_qualified()","is_declaration()","is_definition()","is_dynamic_call()","is_equal()","is_equal()","is_equal()","is_equal()","is_equal()","is_expression()","is_from_main_file()","is_function_type_variadic()","is_in_system_header()","is_invalid()","is_multiple_include_guarded()","is_null()","is_null()","is_obj_c_optional()","is_pod()","is_preprocessing()","is_reference()","is_restrict_qualified()","is_statement()","is_system()","is_translation_unit()","is_variadic()","is_virtual_base()","is_volatile_qualified()","kind()","kind()","language()","lexical_parent()","linkage()","location()","mangling()","module()","module()","mtime()","name()","name()","new()","new()","null_cursor()","null_source_location()","null_source_range()","num_annotations()","num_arg_types()","num_arguments()","num_chunks()","num_diagnostics()","num_elements()","num_fixits()","num_overloaded_decls()","num_ranges()","num_results()","num_template_arguments()","num_template_arguments()","num_top_level_headers()","obj_c_decl_qualifiers()","obj_c_property_attributes()","obj_c_selector_index()","offset_of()","offset_of_field()","option()","overloaded_decl()","overloaded_decls()","overridden_cursors()","parent()","parse_translation_unit()","parse_translation_unit2()","parse_translation_unit_raw()","pointee_type()","priority()","range()","raw_comment_text()","receiver_type()","reference_name_range()","referenced()","reparse()","result()","result_type()","result_type()","results()","semantic_parent()","severity()","size_of()","sort_results()","source_location()","source_range()","source_ranges()","specialized_cursor_template()","spelling()","spelling()","spelling()","spelling()","spelling()","spelling_name_range()","start()","storage_class()","template_argument_as_type()","template_argument_kind()","template_argument_type()","template_argument_unsigned_value()","template_argument_value()","template_arguments_as_type()","template_arguments_kinds()","template_arguments_types()","template_arguments_unsigned_values()","template_arguments_values()","template_cursor_kind()","top_level_header()","top_level_headers()","type()","type_declaration()","typedef_decl_underlying_type()","usr()","version()","visit_children()","visit_children_with_block()","visit_children_with_proc()","readme"],"longSearchIndex":["clangc","clangc::codecompleteresults","clangc::completionresult","clangc::completionstring","clangc::cursor","clangc::cursorset","clangc::diagnostic","clangc::file","clangc::index","clangc::module","clangc::overriddencursor","clangc::sourcelocation","clangc::sourcerange","clangc::translationunit","clangc::type","clangc::type#align_of()","clangc::completionstring#annotation()","clangc::completionstring#annotations()","clangc::type#arg_type()","clangc::type#arg_types()","clangc::cursor#argument()","clangc::cursor#arguments()","clangc::type#array_element_type()","clangc::type#array_size()","clangc::module#ast_file()","clangc::completionstring#availability()","clangc::cursor#availability()","clangc::completionstring#brief_comment()","clangc::cursor#brief_comment_text()","clangc::type#calling_conv()","clangc::cursor#canonical_cursor()","clangc::type#canonical_type()","clangc::diagnostic#category()","clangc::diagnostic#category_name()","clangc::diagnostic#category_text()","clangc::completionstring#chunk_completion_string()","clangc::completionstring#chunk_completion_strings()","clangc::completionstring#chunk_kind()","clangc::completionstring#chunk_kinds()","clangc::completionstring#chunk_text()","clangc::completionstring#chunk_texts()","clangc::type#class_type()","clangc::translationunit#code_complete_at()","clangc::cursor#comment_range()","clangc::completionresult#completion_string()","clangc::cursor#completion_string()","clangc::codecompleteresults#container_usr()","clangc::cursorset#contains()","clangc::codecompleteresults#contexts()","clangc::index#create_translation_unit()","clangc::index#create_translation_unit2()","clangc::index#create_translation_unit_from_source_file()","clangc::index#create_translation_unit_raw()","clangc::translationunit#cursor()","clangc::completionresult#cursor_kind()","clangc::cursor#cxx_access_specifier()","clangc::cursor#cxx_method_is_const()","clangc::cursor#cxx_method_is_pure_virtual()","clangc::cursor#cxx_method_is_static()","clangc::cursor#cxx_method_is_virtual()","clangc::type#cxx_ref_qualifier()","clangc::cursor#decl_obj_c_type_encoding()","clangc::default_code_complete_options()","clangc::default_diagnostic_display_options()","clangc::default_editing_translation_unit_options()","clangc::translationunit#default_reparse_options()","clangc::translationunit#default_save_options()","clangc::cursor#definition()","clangc::codecompleteresults#diagnostic()","clangc::translationunit#diagnostic()","clangc::codecompleteresults#diagnostics()","clangc::translationunit#diagnostics()","clangc::translationunit#diagnostics_num()","clangc::cursor#display_name()","clangc::type#element_type()","clangc::sourcerange#end()","clangc::cursor#enum_const_decl_unsigned_value()","clangc::cursor#enum_const_decl_value()","clangc::cursor#enum_decl_integer_type()","clangc::cursor#extent()","clangc::cursor#field_decl_bit_width()","clangc::translationunit#file()","clangc::sourcelocation#file_location()","clangc::diagnostic#fixit()","clangc::diagnostic#format()","clangc::module#full_name()","clangc::index#global_options()","clangc::index#global_options=()","clangc::cursor#hash()","clangc::cursor#ib_outlet_collection_type()","clangc::cursor#included_file()","clangc::cursorset#insert()","clangc::cursor#is_anonymous()","clangc::cursor#is_attribute()","clangc::cursor#is_bit_field()","clangc::type#is_const_qualified()","clangc::cursor#is_declaration()","clangc::cursor#is_definition()","clangc::cursor#is_dynamic_call()","clangc::cursor#is_equal()","clangc::file#is_equal()","clangc::sourcelocation#is_equal()","clangc::sourcerange#is_equal()","clangc::type#is_equal()","clangc::cursor#is_expression()","clangc::sourcelocation#is_from_main_file()","clangc::type#is_function_type_variadic()","clangc::sourcelocation#is_in_system_header()","clangc::cursor#is_invalid()","clangc::file#is_multiple_include_guarded()","clangc::cursor#is_null()","clangc::sourcerange#is_null()","clangc::cursor#is_obj_c_optional()","clangc::type#is_pod()","clangc::cursor#is_preprocessing()","clangc::cursor#is_reference()","clangc::type#is_restrict_qualified()","clangc::cursor#is_statement()","clangc::module#is_system()","clangc::cursor#is_translation_unit()","clangc::cursor#is_variadic()","clangc::cursor#is_virtual_base()","clangc::type#is_volatile_qualified()","clangc::cursor#kind()","clangc::type#kind()","clangc::cursor#language()","clangc::cursor#lexical_parent()","clangc::cursor#linkage()","clangc::cursor#location()","clangc::cursor#mangling()","clangc::cursor#module()","clangc::translationunit#module()","clangc::file#mtime()","clangc::file#name()","clangc::module#name()","clangc::cursorset::new()","clangc::index::new()","clangc::null_cursor()","clangc::null_source_location()","clangc::null_source_range()","clangc::completionstring#num_annotations()","clangc::type#num_arg_types()","clangc::cursor#num_arguments()","clangc::completionstring#num_chunks()","clangc::codecompleteresults#num_diagnostics()","clangc::type#num_elements()","clangc::diagnostic#num_fixits()","clangc::cursor#num_overloaded_decls()","clangc::diagnostic#num_ranges()","clangc::codecompleteresults#num_results()","clangc::cursor#num_template_arguments()","clangc::type#num_template_arguments()","clangc::module#num_top_level_headers()","clangc::cursor#obj_c_decl_qualifiers()","clangc::cursor#obj_c_property_attributes()","clangc::cursor#obj_c_selector_index()","clangc::type#offset_of()","clangc::cursor#offset_of_field()","clangc::diagnostic#option()","clangc::cursor#overloaded_decl()","clangc::cursor#overloaded_decls()","clangc::cursor#overridden_cursors()","clangc::module#parent()","clangc::index#parse_translation_unit()","clangc::index#parse_translation_unit2()","clangc::index#parse_translation_unit_raw()","clangc::type#pointee_type()","clangc::completionstring#priority()","clangc::range()","clangc::cursor#raw_comment_text()","clangc::cursor#receiver_type()","clangc::cursor#reference_name_range()","clangc::cursor#referenced()","clangc::translationunit#reparse()","clangc::codecompleteresults#result()","clangc::cursor#result_type()","clangc::type#result_type()","clangc::codecompleteresults#results()","clangc::cursor#semantic_parent()","clangc::diagnostic#severity()","clangc::type#size_of()","clangc::codecompleteresults#sort_results()","clangc::diagnostic#source_location()","clangc::diagnostic#source_range()","clangc::diagnostic#source_ranges()","clangc::cursor#specialized_cursor_template()","clangc::cursor#spelling()","clangc::diagnostic#spelling()","clangc::sourcelocation#spelling()","clangc::translationunit#spelling()","clangc::type#spelling()","clangc::cursor#spelling_name_range()","clangc::sourcerange#start()","clangc::cursor#storage_class()","clangc::type#template_argument_as_type()","clangc::cursor#template_argument_kind()","clangc::cursor#template_argument_type()","clangc::cursor#template_argument_unsigned_value()","clangc::cursor#template_argument_value()","clangc::type#template_arguments_as_type()","clangc::cursor#template_arguments_kinds()","clangc::cursor#template_arguments_types()","clangc::cursor#template_arguments_unsigned_values()","clangc::cursor#template_arguments_values()","clangc::cursor#template_cursor_kind()","clangc::module#top_level_header()","clangc::module#top_level_headers()","clangc::cursor#type()","clangc::type#type_declaration()","clangc::cursor#typedef_decl_underlying_type()","clangc::cursor#usr()","clangc::version()","clangc::visit_children()","clangc::visit_children_with_block()","clangc::visit_children_with_proc()",""],"info":[["Clangc","","Clangc.html","",""],["Clangc::CodeCompleteResults","","Clangc/CodeCompleteResults.html","","<p>CXCodeCompleteResults class and method\n"],["Clangc::CompletionResult","","Clangc/CompletionResult.html","","<p>CXCompletionResult class and method\n"],["Clangc::CompletionString","","Clangc/CompletionString.html","","<p>brief A semantic string that describes a code-completion result.\n<p>A semantic string that describes the …\n"],["Clangc::Cursor","","Clangc/Cursor.html","","<p>A cursor representing some element in the abstract syntax tree for a\ntranslation unit.\n<p>The cursor abstraction …\n"],["Clangc::CursorSet","","Clangc/CursorSet.html","","<p>brief A fast container representing a set of CXCursors.\n"],["Clangc::Diagnostic","","Clangc/Diagnostic.html","","<p>A diagnostic object, containing the diagnostic&#39;s severity, location,\ntext, source ranges, and fix-it …\n"],["Clangc::File","","Clangc/File.html","","<p>A particular source file that is part of a translation unit\n"],["Clangc::Index","","Clangc/Index.html","","<p>An “index” consists of a set of translation units that would typically be\nlinked together into …\n"],["Clangc::Module","","Clangc/Module.html","","<p>CXModule class and method\n"],["Clangc::OverriddenCursor","","Clangc/OverriddenCursor.html","","<p>Overriden Cursor is a subclass of cursor created because they need to be\nfreed unlike the basics Clangc::Cursor …\n"],["Clangc::SourceLocation","","Clangc/SourceLocation.html","","<p>Identifies a specific source location within a translation unit.\n<p>Use Clangc::SourceLocation#expansion …\n"],["Clangc::SourceRange","","Clangc/SourceRange.html","","<p>Identifies a half-open character range in the source code.\n<p>Use Clangc::SourceRange#start and Clangc::SourceRange#end …\n"],["Clangc::TranslationUnit","","Clangc/TranslationUnit.html","","<p>A single TranslationUnit which resides in an Index\n"],["Clangc::Type","","Clangc/Type.html","","<p>Type informations for Clangc::Cursor\n"],["align_of","Clangc::Type","Clangc/Type.html#method-i-align_of","()","<p>Return the alignment of a type in bytes as per C++\n\n<pre>standard.</pre>\n<p>If the type declaration is invalid, Clangc::TypeLayoutError::INVALID …\n"],["annotation","Clangc::CompletionString","Clangc/CompletionString.html#method-i-annotation","(p1)","<p>Retrieve the annotation associated with the given completion string.\n<p>annotation_number the 0-based index …\n"],["annotations","Clangc::CompletionString","Clangc/CompletionString.html#method-i-annotations","()","<p>Return an array that contains all the  annotations for a completion string.\n"],["arg_type","Clangc::Type","Clangc/Type.html#method-i-arg_type","(p1)","<p>Retrieve the type of a parameter of a function type.\n<p>If a non-function type is passed in or the function …\n"],["arg_types","Clangc::Type","Clangc/Type.html#method-i-arg_types","()","<p>Return an array that contains all the  types for the argument of the\nfunction that is related to the …\n"],["argument","Clangc::Cursor","Clangc/Cursor.html#method-i-argument","(p1)","<p>Retrieve the argument cursor of a function or method.\n<p>The argument cursor can be determined for calls …\n"],["arguments","Clangc::Cursor","Clangc/Cursor.html#method-i-arguments","()","<p>Return an array that contains all the  cursors for the arguments of the\nfunction that is related to the …\n"],["array_element_type","Clangc::Type","Clangc/Type.html#method-i-array_element_type","()","<p>Return the element type of an array type.\n<p>If a non-array type is passed in, an invalid type is returned. …\n"],["array_size","Clangc::Type","Clangc/Type.html#method-i-array_size","()","<p>Return the array size of a constant array.\n<p>If a non-array type is passed in, -1 is returned.\n"],["ast_file","Clangc::Module","Clangc/Module.html#method-i-ast_file","()","<p>Get the module file where the provided module object came from.\n"],["availability","Clangc::CompletionString","Clangc/CompletionString.html#method-i-availability","()","<p>Clangc::CompletionString#availability =&gt; Clangc::AvailabilityKind\n<p>Determine the availability of the …\n"],["availability","Clangc::Cursor","Clangc/Cursor.html#method-i-availability","()","<p>Determine the availability of the entity that this cursor refers to, taking\nthe current target platform …\n"],["brief_comment","Clangc::CompletionString","Clangc/CompletionString.html#method-i-brief_comment","()","<p>Call-seq:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Clangc</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">CompletionString</span><span class=\"ruby-comment\">#brief_comment =&gt; String</span>\n</pre>\n<p>Retrieve the brief documentation comment attached …\n"],["brief_comment_text","Clangc::Cursor","Clangc/Cursor.html#method-i-brief_comment_text","()","<p>Given a cursor that represents a documentable entity (e.g., declaration),\nreturn the associated brief …\n"],["calling_conv","Clangc::Type","Clangc/Type.html#method-i-calling_conv","()","<p>Retrieve the calling convention associated with a function type.\n<p>If a non-function type is passed in, …\n"],["canonical_cursor","Clangc::Cursor","Clangc/Cursor.html#method-i-canonical_cursor","()","<p>Retrieve the canonical cursor corresponding to the given cursor.\n<p>In the C family of languages, many kinds …\n"],["canonical_type","Clangc::Type","Clangc/Type.html#method-i-canonical_type","()","<p>Return the canonical type for a Clangc::Type.\n<p>Clang&#39;s type system explicitly models typedefs and all …\n"],["category","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-category","()","<p>Retrieve the category number for this diagnostic.\n<p>Diagnostics can be categorized into groups along with …\n"],["category_name","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-category_name","()","<p>Retrieve the name of a particular diagnostic category.  This is now\ndeprecated.  Use Clangc::Diagnostic#category_text …\n"],["category_text","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-category_text","()","<p>Retrieve the diagnostic category text for a given diagnostic. Returns The\ntext of the given diagnostic …\n"],["chunk_completion_string","Clangc::CompletionString","Clangc/CompletionString.html#method-i-chunk_completion_string","(p1)","<p>Retrieve the completion string associated with a particular chunk within a\ncompletion string.\n<p>0-based …\n"],["chunk_completion_strings","Clangc::CompletionString","Clangc/CompletionString.html#method-i-chunk_completion_strings","()","<p>Return an array that contains all the  completion strings for a completion\nstring.\n"],["chunk_kind","Clangc::CompletionString","Clangc/CompletionString.html#method-i-chunk_kind","(p1)","<p>Determine the kind of a particular chunk within a completion string.\n<p>chunk_number the 0-based index of …\n"],["chunk_kinds","Clangc::CompletionString","Clangc/CompletionString.html#method-i-chunk_kinds","()","<p>Return an array that contains all the  kinds of the chunk completions for a\ncompletion string.\n"],["chunk_text","Clangc::CompletionString","Clangc/CompletionString.html#method-i-chunk_text","(p1)","<p>call-seq\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Clangc</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">CompletionString</span><span class=\"ruby-comment\">#chunk_text(Number) =&gt; String</span>\n</pre>\n<p>Retrieve the text associated with a particular …\n"],["chunk_texts","Clangc::CompletionString","Clangc/CompletionString.html#method-i-chunk_texts","()","<p>Return an array that contains all the  texts of the chunk completions for a\ncompletion string.\n"],["class_type","Clangc::Type","Clangc/Type.html#method-i-class_type","()","<p>Return the class type of an member pointer type.\n<p>If a non-member-pointer type is passed in, an invalid …\n"],["code_complete_at","Clangc::TranslationUnit","Clangc/TranslationUnit.html#method-i-code_complete_at","(p1, p2, p3, p4)","<p>Perform code completion at a given location in a translation unit.\n<p>This function performs code completion …\n"],["comment_range","Clangc::Cursor","Clangc/Cursor.html#method-i-comment_range","()","<p>Given a cursor that represents a declaration, return the associated\ncomment&#39;s source range.  The …\n"],["completion_string","Clangc::CompletionResult","Clangc/CompletionResult.html#method-i-completion_string","()","<p>The code-completion string that describes how to insert this\ncode-completion result into the editing …\n"],["completion_string","Clangc::Cursor","Clangc/Cursor.html#method-i-completion_string","()","<p>Retrieve a completion string for an arbitrary declaration or macro\ndefinition cursor.\n<p>It returns a non-context-sensitive …\n"],["container_usr","Clangc::CodeCompleteResults","Clangc/CodeCompleteResults.html#method-i-container_usr","()","<p>Returns the USR for the container for the current code completion context.\nIf there is not a container …\n"],["contains","Clangc::CursorSet","Clangc/CursorSet.html#method-i-contains","(p1)","<p>Queries a CXCursorSet to see if it contains a specific CXCursor.\n<p>Returns true if the set contains the …\n"],["contexts","Clangc::CodeCompleteResults","Clangc/CodeCompleteResults.html#method-i-contexts","()","<p>Determines what completions are appropriate for the context the given code\ncompletion.\n<p>the kinds of completions …\n"],["create_translation_unit","Clangc::Index","Clangc/Index.html#method-i-create_translation_unit","(p1)","<p>Create a translation unit from an AST file name. If the creation fail, it\nreturns nil. The AST file is …\n"],["create_translation_unit2","Clangc::Index","Clangc/Index.html#method-i-create_translation_unit2","(p1)","<p>Create a translation unit from an AST file name. If the creation fail, it\nreturns an error code Clangc::ErrorCode …\n"],["create_translation_unit_from_source_file","Clangc::Index","Clangc/Index.html#method-i-create_translation_unit_from_source_file","(p1, p2)","<p>Return a TranslationUnit instance for a given source file and the provided\ncommand line arguments one …\n"],["create_translation_unit_raw","Clangc::Index","Clangc/Index.html#method-i-create_translation_unit_raw","(p1)","<p>:call-seq:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Clangc</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Index</span><span class=\"ruby-comment\">#translation_unit(options) =&gt; Clangc::TranslationUnit</span>\n</pre>\n<p>Convenient method that easily …\n"],["cursor","Clangc::TranslationUnit","Clangc/TranslationUnit.html#method-i-cursor","()","<p>Retrieve the cursor that represents the given translation unit.\n<p>The translation unit cursor can be used …\n"],["cursor_kind","Clangc::CompletionResult","Clangc/CompletionResult.html#method-i-cursor_kind","()","<p>brief The kind of entity that this completion refers to.\n<p>The cursor kind will be a macro, keyword, or …\n"],["cxx_access_specifier","Clangc::Cursor","Clangc/Cursor.html#method-i-cxx_access_specifier","()","<p>Returns the access control level for the referenced object. The returned\nvalue is one of the Clangc::CXXAccesSpecifier.constants …\n"],["cxx_method_is_const","Clangc::Cursor","Clangc/Cursor.html#method-i-cxx_method_is_const","()","<p>Determine if a C++ member function or member function template is constant.\n"],["cxx_method_is_pure_virtual","Clangc::Cursor","Clangc/Cursor.html#method-i-cxx_method_is_pure_virtual","()","<p>Determine if a C++ member function or member function template is pure\nvirtual.\n"],["cxx_method_is_static","Clangc::Cursor","Clangc/Cursor.html#method-i-cxx_method_is_static","()","<p>Determine if a C++ member function or member function template is static.\n"],["cxx_method_is_virtual","Clangc::Cursor","Clangc/Cursor.html#method-i-cxx_method_is_virtual","()","<p>Determine if a C++ member function or member function template is\nexplicitly declared &#39;virtual&#39; …\n"],["cxx_ref_qualifier","Clangc::Type","Clangc/Type.html#method-i-cxx_ref_qualifier","()","<p>Retrieve the ref-qualifier kind of a function or method.\n<p>The ref-qualifier is returned for C++ functions …\n"],["decl_obj_c_type_encoding","Clangc::Cursor","Clangc/Cursor.html#method-i-decl_obj_c_type_encoding","()","<p>Returns the Objective-C type encoding for the specified declaration.\n"],["default_code_complete_options","Clangc","Clangc.html#method-c-default_code_complete_options","()","<p>Returns a default set of code-completion options that can be passed to\nClangc::TranslationUnit#codeCompleteAt …\n"],["default_diagnostic_display_options","Clangc","Clangc.html#method-c-default_diagnostic_display_options","()","<p>Retrieve the set of display options most similar to the default behavior of\nthe clang compiler.\n<p>A set …\n"],["default_editing_translation_unit_options","Clangc","Clangc.html#method-c-default_editing_translation_unit_options","()","<p>Returns the set of flags that is suitable for parsing a translation unit\nthat is being edited. (Clangc::TranslationUnit_Flags …\n"],["default_reparse_options","Clangc::TranslationUnit","Clangc/TranslationUnit.html#method-i-default_reparse_options","()","<p>Returns the set of flags that is suitable for reparsing a translation unit.\n<p>The set of flags returned …\n"],["default_save_options","Clangc::TranslationUnit","Clangc/TranslationUnit.html#method-i-default_save_options","()","<p>Returns the set of flags that is suitable for saving a translation unit.\nThose flags should be Clangc::SaveTranslationUnit_Flags …\n"],["definition","Clangc::Cursor","Clangc/Cursor.html#method-i-definition","()","<p>For a cursor that is either a reference to or a declaration of some entity,\nretrieve a cursor that describes …\n"],["diagnostic","Clangc::CodeCompleteResults","Clangc/CodeCompleteResults.html#method-i-diagnostic","(p1)","<p>Retrieve a diagnostic associated with the given code completion.\n"],["diagnostic","Clangc::TranslationUnit","Clangc/TranslationUnit.html#method-i-diagnostic","(p1)","<p>Retrieve a diagnostic associated with the given translation unit.\n<p>index the zero-based diagnostic number …\n"],["diagnostics","Clangc::CodeCompleteResults","Clangc/CodeCompleteResults.html#method-i-diagnostics","()","<p>Returns an Array of Clangc::Diagnostics\n"],["diagnostics","Clangc::TranslationUnit","Clangc/TranslationUnit.html#method-i-diagnostics","()","<p>Returns an array of Clangc::Diagnostic for the current\nClangc::TranslationUnit. The array is empty if …\n"],["diagnostics_num","Clangc::TranslationUnit","Clangc/TranslationUnit.html#method-i-diagnostics_num","()","<p>Determine the number of diagnostics produced for the given translation\nunit.\n"],["display_name","Clangc::Cursor","Clangc/Cursor.html#method-i-display_name","()","<p>Retrieve the display name for the entity referenced by this cursor.\n<p>The display name contains extra information …\n"],["element_type","Clangc::Type","Clangc/Type.html#method-i-element_type","()","<p>Return the element type of an array, complex, or vector type.\n<p>If a type is passed in that is not an array, …\n"],["end","Clangc::SourceRange","Clangc/SourceRange.html#method-i-end","()","<p>Retrieve a source location representing the last character within a source\nrange.\n"],["enum_const_decl_unsigned_value","Clangc::Cursor","Clangc/Cursor.html#method-i-enum_const_decl_unsigned_value","()","<p>Retrieve the integer value of an enum constant declaration as an unsigned\nlong long.\n<p>If the cursor does …\n"],["enum_const_decl_value","Clangc::Cursor","Clangc/Cursor.html#method-i-enum_const_decl_value","()","<p>Retrieve the integer value of an enum constant declaration as a signed long\nlong.\n<p>If the cursor does not …\n"],["enum_decl_integer_type","Clangc::Cursor","Clangc/Cursor.html#method-i-enum_decl_integer_type","()","<p>Retrieve the integer type of an enum declaration.\n<p>If the cursor does not reference an enum declaration, …\n"],["extent","Clangc::Cursor","Clangc/Cursor.html#method-i-extent","()","<p>Retrieve the physical extent of the source construct referenced by the\ngiven cursor.\n<p>The extent of a cursor …\n"],["field_decl_bit_width","Clangc::Cursor","Clangc/Cursor.html#method-i-field_decl_bit_width","()","<p>Retrieve the bit width of a bit field declaration as an integer.\n<p>If a cursor that is not a bit field declaration …\n"],["file","Clangc::TranslationUnit","Clangc/TranslationUnit.html#method-i-file","(p1)","<p>Retrieve a file handle within the given translation unit. file_name a\nString for the name of the file. …\n"],["file_location","Clangc::SourceLocation","Clangc/SourceLocation.html#method-i-file_location","()","<p>Retrieve the file, line, column, and offset represented by the given source\nlocation.\n<p>If the location …\n"],["fixit","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-fixit","(p1)","<p>Retrieve the replacement information for a given fix-it.\n<p>Fix-its are described in terms of a source range …\n"],["format","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-format","(p1)","<p>Format the given diagnostic in a manner that is suitable for display.\n<p>This routine will format the given …\n"],["full_name","Clangc::Module","Clangc/Module.html#method-i-full_name","()","<p>Returns the full name of the module, e.g. “std.vector”.\n"],["global_options","Clangc::Index","Clangc/Index.html#method-i-global_options","()","<p>Gets the general options associated with an Index. A bitmask of options, a\nbitwise OR of the Clangc::GlobalOptFlags …\n"],["global_options=","Clangc::Index","Clangc/Index.html#method-i-global_options-3D","(p1)","<p>Sets general options associated with an Index instance.\n<p>options:\n\n<p>A bitmask of options, a bitwise OR of …\n"],["hash","Clangc::Cursor","Clangc/Cursor.html#method-i-hash","()","<p>Compute a hash value for the given cursor.\n"],["ib_outlet_collection_type","Clangc::Cursor","Clangc/Cursor.html#method-i-ib_outlet_collection_type","()","<p>For cursors representing an iboutletcollection attribute,\n\n<pre>this function returns the collection element ...</pre>\n"],["included_file","Clangc::Cursor","Clangc/Cursor.html#method-i-included_file","()","<p>Retrieve the file that is included by the given inclusion directive cursor.\n"],["insert","Clangc::CursorSet","Clangc/CursorSet.html#method-i-insert","(p1)","<p>Inserts a CXCursor into a CXCursorSet.\n<p>Returns false if the CXCursor was already in the set, and true …\n"],["is_anonymous","Clangc::Cursor","Clangc/Cursor.html#method-i-is_anonymous","()","<p>Determine whether the given cursor represents an anonymous record\ndeclaration.\n"],["is_attribute","Clangc::Cursor","Clangc/Cursor.html#method-i-is_attribute","()","<p>Determine whether the given cursor kind represents an attribute.\n"],["is_bit_field","Clangc::Cursor","Clangc/Cursor.html#method-i-is_bit_field","()","<p>Returns true if the cursor specifies a Record member that is a bitfield.\n"],["is_const_qualified","Clangc::Type","Clangc/Type.html#method-i-is_const_qualified","()","<p>Determine whether a Clangc::Type instance has the “const” qualifier set,\nwithout looking through …\n"],["is_declaration","Clangc::Cursor","Clangc/Cursor.html#method-i-is_declaration","()","<p>Determine whether the given cursor kind represents a declaration.\n"],["is_definition","Clangc::Cursor","Clangc/Cursor.html#method-i-is_definition","()","<p>Determine whether the declaration pointed to by this cursor is also a\ndefinition of that entity.\n"],["is_dynamic_call","Clangc::Cursor","Clangc/Cursor.html#method-i-is_dynamic_call","()","<p>Given a cursor pointing to a C++ method call or an Objective-C message,\nreturns non-zero if the method/message …\n"],["is_equal","Clangc::Cursor","Clangc/Cursor.html#method-i-is_equal","(p1)","<p>Determine whether two cursors are equivalent.\n"],["is_equal","Clangc::File","Clangc/File.html#method-i-is_equal","(p1)","<p>Returns true if the file1 and file2 point to the same file, or both null.\nTwo ruby objects Clangc::File …\n"],["is_equal","Clangc::SourceLocation","Clangc/SourceLocation.html#method-i-is_equal","(p1)","<p>Determine whether two source locations, which must refer into the same\ntranslation unit, refer to exactly …\n"],["is_equal","Clangc::SourceRange","Clangc/SourceRange.html#method-i-is_equal","(p1)","<p>Determine whether two ranges are equivalent. Returns true if the ranges are\nthe same, false if they differ. …\n"],["is_equal","Clangc::Type","Clangc/Type.html#method-i-is_equal","(p1)","<p>Determine whether two Clangc::Type represent the same type.\n<p>Returns true if the Clangc::Type represent …\n"],["is_expression","Clangc::Cursor","Clangc/Cursor.html#method-i-is_expression","()","<p>Determine whether the given cursor kind represents an expression.\n"],["is_from_main_file","Clangc::SourceLocation","Clangc/SourceLocation.html#method-i-is_from_main_file","()","<p>Returns true if the given source location is in the main file of the\ncorresponding translation unit. …\n"],["is_function_type_variadic","Clangc::Type","Clangc/Type.html#method-i-is_function_type_variadic","()","<p>Return true if the Clangc::Type is a variadic function type, and false\notherwise.\n"],["is_in_system_header","Clangc::SourceLocation","Clangc/SourceLocation.html#method-i-is_in_system_header","()","<p>Returns true if the given source location is in a system header.\n"],["is_invalid","Clangc::Cursor","Clangc/Cursor.html#method-i-is_invalid","()","<p>Determine whether the given cursor kind represents an invalid cursor.\n"],["is_multiple_include_guarded","Clangc::File","Clangc/File.html#method-i-is_multiple_include_guarded","()","<p>Determine whether the given header is guarded against multiple inclusions,\neither with the conventional …\n"],["is_null","Clangc::Cursor","Clangc/Cursor.html#method-i-is_null","()","<p>return true is the cursor is a null Cursor or false otherwise\n"],["is_null","Clangc::SourceRange","Clangc/SourceRange.html#method-i-is_null","()","<p>Returns true is the underlying CXSourceRange is NULL or false otherwise\n"],["is_obj_c_optional","Clangc::Cursor","Clangc/Cursor.html#method-i-is_obj_c_optional","()","<p>Given a cursor that represents an Objective-C method or property\ndeclaration, return non-zero if the …\n"],["is_pod","Clangc::Type","Clangc/Type.html#method-i-is_pod","()","<p>Return true if the Clangc::Type is a POD (plain old data) type, and false\notherwise.\n"],["is_preprocessing","Clangc::Cursor","Clangc/Cursor.html#method-i-is_preprocessing","()","<p>Determine whether the given cursor represents a preprocessing element, such\nas a preprocessor directive …\n"],["is_reference","Clangc::Cursor","Clangc/Cursor.html#method-i-is_reference","()","<p>Determine whether the given cursor kind represents a simple reference.\n<p>Note that other kinds of cursors …\n"],["is_restrict_qualified","Clangc::Type","Clangc/Type.html#method-i-is_restrict_qualified","()","<p>Determine whether a Clangc::Type instance has the “restrict” qualifier set,\nwithout looking …\n"],["is_statement","Clangc::Cursor","Clangc/Cursor.html#method-i-is_statement","()","<p>Determine whether the given cursor kind represents a statement.\n"],["is_system","Clangc::Module","Clangc/Module.html#method-i-is_system","()","<p>Returns non-zero if the module is a system one.\n"],["is_translation_unit","Clangc::Cursor","Clangc/Cursor.html#method-i-is_translation_unit","()","<p>Determine whether the given cursor kind represents a translation unit.\n"],["is_variadic","Clangc::Cursor","Clangc/Cursor.html#method-i-is_variadic","()","<p>Returns non-zero if the given cursor is a variadic function or method.\n"],["is_virtual_base","Clangc::Cursor","Clangc/Cursor.html#method-i-is_virtual_base","()","<p>Returns true if the base class specified by the cursor with kind\nClangc::CursorKind::CXX_BASE_SPECIFIER …\n"],["is_volatile_qualified","Clangc::Type","Clangc/Type.html#method-i-is_volatile_qualified","()","<p>Determine whether a Clangc::Type instance has the “volatile” qualifier set,\nwithout looking …\n"],["kind","Clangc::Cursor","Clangc/Cursor.html#method-i-kind","()","<p>Retrieve the kind of the given cursor. The value should refer to the\nconstants in Clangc::CursorKind …\n"],["kind","Clangc::Type","Clangc/Type.html#method-i-kind","()","<p>Get the kind of type. The returned value is a postive integer contained in\nClangc::TypeKind.constants …\n"],["language","Clangc::Cursor","Clangc/Cursor.html#method-i-language","()","<p>Determine the “language” of the entity referred to by a given cursor. The\nvalue should refer …\n"],["lexical_parent","Clangc::Cursor","Clangc/Cursor.html#method-i-lexical_parent","()","<p>Determine the lexical parent of the given cursor.\n<p>The lexical parent of a cursor is the cursor in which …\n"],["linkage","Clangc::Cursor","Clangc/Cursor.html#method-i-linkage","()","<p>Determine the linkage of the entity referred to by a given cursor. The\nvalue should refer to the constants …\n"],["location","Clangc::Cursor","Clangc/Cursor.html#method-i-location","()","<p>Retrieve the physical location of the source constructor referenced by the\ngiven cursor.\n<p>The location …\n"],["mangling","Clangc::Cursor","Clangc/Cursor.html#method-i-mangling","()",""],["module","Clangc::Cursor","Clangc/Cursor.html#method-i-module","()","<p>Given a Clangc::CursorKind::MODULE_IMPORT_DECL cursor, return the\nassociated module.\n"],["module","Clangc::TranslationUnit","Clangc/TranslationUnit.html#method-i-module","(p1)","<p>Given a Clangc::File header file, return the module that contains it, if\none exists.\n"],["mtime","Clangc::File","Clangc/File.html#method-i-mtime","()","<p>Retrieve the last modification time of the given file.\n"],["name","Clangc::File","Clangc/File.html#method-i-name","()","<p>Retrieve the complete file and path name of the given file. Returns Qnil if\nthe CXFile pointer is NULL …\n"],["name","Clangc::Module","Clangc/Module.html#method-i-name","()","<p>Get the name of the module, e.g. for the &#39;std.vector&#39; sub-module it\nwill return “vector”. …\n"],["new","Clangc::CursorSet","Clangc/CursorSet.html#method-c-new","()","<p>Creates an empty Clangc::CursorSet instance which is a fast container\nrepresenting a set of Clangc::Cursor …\n"],["new","Clangc::Index","Clangc/Index.html#method-c-new","(p1, p2)","<p>Provides a shared context for creating translation units.\n<p>It provides two options:\n<p>excludeDeclarationsFromPCH: …\n"],["null_cursor","Clangc","Clangc.html#method-c-null_cursor","()","<p>Retrieve a NULL cursor which represents no entity\n"],["null_source_location","Clangc","Clangc.html#method-c-null_source_location","()","<p>Retrieve a NULL (invalid) source location.\n"],["null_source_range","Clangc","Clangc.html#method-c-null_source_range","()","<p>Retrieve a NULL (invalid) source range\n"],["num_annotations","Clangc::CompletionString","Clangc/CompletionString.html#method-i-num_annotations","()","<p>Retrieve the number of annotations associated with the given completion\nstring.\n<p>Returns the number of …\n"],["num_arg_types","Clangc::Type","Clangc/Type.html#method-i-num_arg_types","()","<p>Retrieve the number of non-variadic parameters associated with a function\ntype.\n<p>If a non-function type …\n"],["num_arguments","Clangc::Cursor","Clangc/Cursor.html#method-i-num_arguments","()","<p>Retrieve the number of non-variadic arguments associated with a given\ncursor.\n<p>The number of arguments …\n"],["num_chunks","Clangc::CompletionString","Clangc/CompletionString.html#method-i-num_chunks","()","<p>Retrieve the number of chunks in the given code-completion string.\n"],["num_diagnostics","Clangc::CodeCompleteResults","Clangc/CodeCompleteResults.html#method-i-num_diagnostics","()","<p>Determine the number of diagnostics produced prior to the location where\ncode completion was performed. …\n"],["num_elements","Clangc::Type","Clangc/Type.html#method-i-num_elements","()","<p>Return the number of elements of an array or vector type.\n<p>If a type is passed in that is not an array …\n"],["num_fixits","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-num_fixits","()","<p>Determine the number of fix-it hints associated with the given diagnostic.\n"],["num_overloaded_decls","Clangc::Cursor","Clangc/Cursor.html#method-i-num_overloaded_decls","()","<p>Determine the number of overloaded declarations referenced by a\nClangc::CursorKind::OVERLOADED_DECL_REF …\n"],["num_ranges","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-num_ranges","()","<p>Determine the number of source ranges associated with the given diagnostic.\n"],["num_results","Clangc::CodeCompleteResults","Clangc/CodeCompleteResults.html#method-i-num_results","()","<p>Retrieve the number of Clangc::CompletionResult\n<p>Not based on libclang function\n"],["num_template_arguments","Clangc::Cursor","Clangc/Cursor.html#method-i-num_template_arguments","()","<p>Returns the number of template args of a function decl representing a\ntemplate specialization.\n<p>If the …\n"],["num_template_arguments","Clangc::Type","Clangc/Type.html#method-i-num_template_arguments","()","<p>Returns the number of template arguments for given class template\nspecialization, or -1 if type c T is …\n"],["num_top_level_headers","Clangc::Module","Clangc/Module.html#method-i-num_top_level_headers","(p1)","<p>The number of top level headers associated with this module.\n"],["obj_c_decl_qualifiers","Clangc::Cursor","Clangc/Cursor.html#method-i-obj_c_decl_qualifiers","()","<p>brief Given a cursor that represents an Objective-C method or parameter\ndeclaration, return the associated …\n"],["obj_c_property_attributes","Clangc::Cursor","Clangc/Cursor.html#method-i-obj_c_property_attributes","(p1)","<p>Given a cursor that represents a property declaration, return the\nassociated property attributes. The …\n"],["obj_c_selector_index","Clangc::Cursor","Clangc/Cursor.html#method-i-obj_c_selector_index","()","<p>If the cursor points to a selector identifier in an Objective-C method or\nmessage expression, this returns …\n"],["offset_of","Clangc::Type","Clangc/Type.html#method-i-offset_of","(p1)","\n<pre>Return the offset of a field named S in a record of type T in bits\n as it would be returned by __offsetof__ ...</pre>\n"],["offset_of_field","Clangc::Cursor","Clangc/Cursor.html#method-i-offset_of_field","()","<p>Return the offset of the field represented by the Cursor.\n<p>If the cursor is not a field declaration, -1 …\n"],["option","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-option","()","<p>Retrieve the name of the command-line option that enabled this diagnostic\nsuch as (“-Wconversion” …\n"],["overloaded_decl","Clangc::Cursor","Clangc/Cursor.html#method-i-overloaded_decl","(p1)","<p>Retrieve a cursor for one of the overloaded declarations referenced by a\nClangc::CursorKind::OVERLOADED_DECL_REF …\n"],["overloaded_decls","Clangc::Cursor","Clangc/Cursor.html#method-i-overloaded_decls","()","<p>Return an array that contains all the  cursors for the overloaded\ndeclarations that are related to the …\n"],["overridden_cursors","Clangc::Cursor","Clangc/Cursor.html#method-i-overridden_cursors","()","<p>Determine the set of methods that are overridden by the given method.\n<p>In both Objective-C and C++, a method …\n"],["parent","Clangc::Module","Clangc/Module.html#method-i-parent","()","<p>the parent of a sub-module or NULL if the given module is top-level, e.g.\nfor &#39;std.vector&#39; it …\n"],["parse_translation_unit","Clangc::Index","Clangc/Index.html#method-i-parse_translation_unit","(p1, p2, p3)","<p>Parse the given source file and generate the translation unit corresponding\nto that file.\n<p>This routine …\n"],["parse_translation_unit2","Clangc::Index","Clangc/Index.html#method-i-parse_translation_unit2","(p1, p2, p3)","<p>Parse the given source file and generate the translation unit corresponding\nto that file. If its fails, …\n"],["parse_translation_unit_raw","Clangc::Index","Clangc/Index.html#method-i-parse_translation_unit_raw","(p1, p2, p3)","<p>:call-seq:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Clangc</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Index</span><span class=\"ruby-comment\">#parse_translation_unit(options) =&gt; Clangc::TranslationUnit</span>\n</pre>\n<p>Convenient method that …\n"],["pointee_type","Clangc::Type","Clangc/Type.html#method-i-pointee_type","()","<p>For pointer types, returns the type of the pointee.\n"],["priority","Clangc::CompletionString","Clangc/CompletionString.html#method-i-priority","()","<p>Determine the priority of this code completion.\n<p>The priority of a code completion indicates how likely …\n"],["range","Clangc","Clangc.html#method-c-range","(p1, p2)","<p>Retrieve a source range given the beginning and ending source locations.\n"],["raw_comment_text","Clangc::Cursor","Clangc/Cursor.html#method-i-raw_comment_text","()","<p>Given a cursor that represents a declaration, return the associated comment\ntext, including comment markers. …\n"],["receiver_type","Clangc::Cursor","Clangc/Cursor.html#method-i-receiver_type","()","<p>Given a cursor pointing to an Objective-C message, returns the CXType of\nthe receiver.\n"],["reference_name_range","Clangc::Cursor","Clangc/Cursor.html#method-i-reference_name_range","(p1, p2)","<p>Given a cursor that references something else, return the source range\ncovering that reference.\n<p>For a …\n"],["referenced","Clangc::Cursor","Clangc/Cursor.html#method-i-referenced","()","<p>For a cursor that is a reference, retrieve a cursor representing the entity\nthat it references.\n<p>Reference …\n"],["reparse","Clangc::TranslationUnit","Clangc/TranslationUnit.html#method-i-reparse","(p1)","<p>Reparse the source files that produced this translation unit.\n<p>This routine can be used to re-parse the …\n"],["result","Clangc::CodeCompleteResults","Clangc/CodeCompleteResults.html#method-i-result","(p1)","<p>Retrieve Clangc::CompletionResult instance a index\n<p>Return nil if  index &lt; 0 or index &gt;= num results …\n"],["result_type","Clangc::Cursor","Clangc/Cursor.html#method-i-result_type","()","<p>Retrieve the return type associated with a function type.\n<p>If a non-function type is passed in, an invalid …\n"],["result_type","Clangc::Type","Clangc/Type.html#method-i-result_type","()","<p>Retrieve the return type associated with a function type.\n<p>If a non-function type is passed in (Clangc::Type#kind …\n"],["results","Clangc::CodeCompleteResults","Clangc/CodeCompleteResults.html#method-i-results","()","<p>Returns an Array of Clangc::CompletionResult\n"],["semantic_parent","Clangc::Cursor","Clangc/Cursor.html#method-i-semantic_parent","()","<p>Determine the semantic parent of the given cursor.\n<p>The semantic parent of a cursor is the cursor that …\n"],["severity","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-severity","()","<p>Determine the severity of the given diagnostic. It returns one of the\nconstants defined in Clangc::DiagnosticSeverity.constants …\n"],["size_of","Clangc::Type","Clangc/Type.html#method-i-size_of","()","<p>Return the size of a type in bytes as per C++ standard.\n<p>If the type declaration is invalid, Clangc::TypeLayoutError::INVALID …\n"],["sort_results","Clangc::CodeCompleteResults","Clangc/CodeCompleteResults.html#method-i-sort_results","()","<p>Sort the code-completion results in case-insensitive alphabetical order.\n"],["source_location","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-source_location","()","<p>Retrieve the source location of the given diagnostic.\n<p>This location is where Clang would print the caret …\n"],["source_range","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-source_range","(p1)","<p>Retrieve a source range associated with the diagnostic.\n<p>A diagnostic&#39;s source ranges highlight important …\n"],["source_ranges","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-source_ranges","()","<p>Returns an array of Clangc::SourceRange for the current Clangc::Diagnostic.\nThe array is empty if there …\n"],["specialized_cursor_template","Clangc::Cursor","Clangc/Cursor.html#method-i-specialized_cursor_template","()","<p>Given a cursor that may represent a specialization or instantiation of a\ntemplate, retrieve the cursor …\n"],["spelling","Clangc::Cursor","Clangc/Cursor.html#method-i-spelling","()","<p>Retrieve a name for the entity referenced by this cursor.\n"],["spelling","Clangc::Diagnostic","Clangc/Diagnostic.html#method-i-spelling","()","<p>Retrieve the text of the given diagnostic.\n"],["spelling","Clangc::SourceLocation","Clangc/SourceLocation.html#method-i-spelling","()","<p>Retrieve the file, line, column, and offset represented by the given source\nlocation.\n<p>If the location …\n"],["spelling","Clangc::TranslationUnit","Clangc/TranslationUnit.html#method-i-spelling","()","<p>Get the original translation unit source file name.\n"],["spelling","Clangc::Type","Clangc/Type.html#method-i-spelling","()","<p>Pretty-print the underlying type using the rules of the language of the\ntranslation unit from which it …\n"],["spelling_name_range","Clangc::Cursor","Clangc/Cursor.html#method-i-spelling_name_range","(p1, p2)","<p>Retrieve a range for a piece that forms the cursors spelling name. Most of\nthe times there is only one …\n"],["start","Clangc::SourceRange","Clangc/SourceRange.html#method-i-start","()","<p>Retrieve a source location representing the first character within a source\nrange.\n"],["storage_class","Clangc::Cursor","Clangc/Cursor.html#method-i-storage_class","()","<p>Returns the storage class for a function or variable declaration.\n<p>If the passed in Cursor is not a function …\n"],["template_argument_as_type","Clangc::Type","Clangc/Type.html#method-i-template_argument_as_type","(p1)","<p>Returns the type template argument of a template class specialization at\ngiven index.\n<p>This function only …\n"],["template_argument_kind","Clangc::Cursor","Clangc/Cursor.html#method-i-template_argument_kind","(p1)","<p>Retrieve the kind of the I&#39;th template argument of the CXCursor C.\n<p>If the argument CXCursor does not …\n"],["template_argument_type","Clangc::Cursor","Clangc/Cursor.html#method-i-template_argument_type","(p1)","<p>Retrieve a Clangc::Type representing the type of a TemplateArgument of a\n\n<pre>function decl representing a ...</pre>\n"],["template_argument_unsigned_value","Clangc::Cursor","Clangc/Cursor.html#method-i-template_argument_unsigned_value","(p1)","\n<pre>Retrieve the value of an Integral TemplateArgument (of a function\ndecl representing a template specialization) ...</pre>\n"],["template_argument_value","Clangc::Cursor","Clangc/Cursor.html#method-i-template_argument_value","(p1)","\n<pre>Retrieve the value of an Integral TemplateArgument (of a function\ndecl representing a template specialization) ...</pre>\n"],["template_arguments_as_type","Clangc::Type","Clangc/Type.html#method-i-template_arguments_as_type","()","<p>Return an array that contains all the  types for the arguments of the\ncurrent Class Type template that …\n"],["template_arguments_kinds","Clangc::Cursor","Clangc/Cursor.html#method-i-template_arguments_kinds","()","<p>Return an array that contains all the  kinds for the arguments of the\nfunction template that is related …\n"],["template_arguments_types","Clangc::Cursor","Clangc/Cursor.html#method-i-template_arguments_types","()","<p>Return an array that contains all the  types for the arguments of the\nfunction template that is related …\n"],["template_arguments_unsigned_values","Clangc::Cursor","Clangc/Cursor.html#method-i-template_arguments_unsigned_values","()","<p>Return an array that contains all the  values for the arguments of the\nfunction template that is related …\n"],["template_arguments_values","Clangc::Cursor","Clangc/Cursor.html#method-i-template_arguments_values","()","<p>Return an array that contains all the  values for the arguments of the\nfunction template that is related …\n"],["template_cursor_kind","Clangc::Cursor","Clangc/Cursor.html#method-i-template_cursor_kind","()","<p>Given a cursor that represents a template, determine the cursor kind of the\nspecializations would be …\n"],["top_level_header","Clangc::Module","Clangc/Module.html#method-i-top_level_header","(p1, p2)","<p>Index top level header index (zero-based).\n<p>Returns the specified top level header associated with the …\n"],["top_level_headers","Clangc::Module","Clangc/Module.html#method-i-top_level_headers","(tu)","<p>Return an array that contains all the  Clangc::File corresponding to the\nrelated toplevel headers. If …\n"],["type","Clangc::Cursor","Clangc/Cursor.html#method-i-type","()","<p>Retrieve the type of a CXCursor (if any).\n"],["type_declaration","Clangc::Type","Clangc/Type.html#method-i-type_declaration","()","<p>Return the cursor for the declaration of the given type.\n"],["typedef_decl_underlying_type","Clangc::Cursor","Clangc/Cursor.html#method-i-typedef_decl_underlying_type","()","<p>Retrieve the underlying type of a typedef declaration.\n<p>If the cursor does not reference a typedef declaration, …\n"],["usr","Clangc::Cursor","Clangc/Cursor.html#method-i-usr","()","<p>Retrieve a Unified Symbol Resolution (USR) for the entity referenced by the\ngiven cursor.\n<p>A Unified Symbol …\n"],["version","Clangc","Clangc.html#method-c-version","()","<p>Return a version string, suitable for showing to a user, but not intended\nto be parsed (the format is …\n"],["visit_children","Clangc","Clangc.html#method-c-visit_children","(args)","<p>This is a convenient method that call Clangc.visit_children_with_proc or\nClangc.visit_children_with_block …\n"],["visit_children_with_block","Clangc","Clangc.html#method-c-visit_children_with_block","(p1)","<p>Visit the children of a particular cursor.\n<p>This function visits all the direct children of the given cursor, …\n"],["visit_children_with_proc","Clangc","Clangc.html#method-c-visit_children_with_proc","(p1, p2)","<p>Visit the children of a particular cursor.\n<p>This function visits all the direct children of the given cursor, …\n"],["README","","README_rdoc.html","","<p>Ruby bindings for libclang \n<p>This module provides bindings for the C interface of Clang. clang.llvm.org\n…\n"]]}}